// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pQ8S4ksMaRtjf4LUNyJVwk
// Component: QM6oypJUBsNsh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent
import Button from "../../Button"; // plasmic-import: FS9TNd8gFxWLy/component
import TextInput from "../../TextInput"; // plasmic-import: U-O7o3saIllC5C/component

import { useScreenVariants as useScreenVariants_0AKxbeQgHDnfsy } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0AKxbeQgHDnfsy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_travel_website.module.css"; // plasmic-import: pQ8S4ksMaRtjf4LUNyJVwk/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: QM6oypJUBsNsh/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: uBa0bIPP1uW5ZV/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Xm9qmMCcKOTCKB/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: e6r7uZ6Khx83_i/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: CIHJNtHjDvxzJO/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: -5skflCodsWzJ3/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: 2XPkdIPWLW6OL1/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  headerMainSection?: p.Flex<"div">;
  container?: p.Flex<"div">;
  menu?: p.Flex<"div">;
  menuBar?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  section1?: p.Flex<"div">;
  youTube?: p.Flex<typeof YouTube>;
  rowContainer8?: p.Flex<"div">;
  brownColorBg?: p.Flex<"div">;
  section12?: p.Flex<"div">;
  rowContainer3?: p.Flex<"div">;
  section13?: p.Flex<"div">;
  rowContainer9?: p.Flex<"div">;
  section14?: p.Flex<"div">;
  rowContainer10?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  blockquote?: p.Flex<"blockquote">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => undefined
          : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0AKxbeQgHDnfsy()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerMainSection"}
            data-plasmic-override={overrides.headerMainSection}
            className={classNames(projectcss.all, sty.headerMainSection)}
          >
            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(projectcss.all, sty.container)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"menu"}
                data-plasmic-override={overrides.menu}
                hasGap={true}
                className={classNames(projectcss.all, sty.menu)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"menuBar"}
                  data-plasmic-override={overrides.menuBar}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.menuBar)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__xuT6D)}
                    displayHeight={"100%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"50px" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    src={{
                      src: "/plasmic/travel_website/images/logo1Svg.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oBCzJ)}
                  >
                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___7QAtK
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__cPvY)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aziW
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "About"
                          : "About"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__uClL)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__ifIwh
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__qeqns)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1HC85
                        )}
                      >
                        {"Rooms"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___7O56W
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__zkr7M
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__cP8HH)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__onb4P
                        )}
                      >
                        {"Spa"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__uXeh3)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__nab94
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__xf4Bw)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bgKpH
                        )}
                      >
                        {"Restaurant"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__xMyYy)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__rrKb5
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__zfx4)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xrwZw
                        )}
                      >
                        {"Amenities"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__jhahi)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__hr06Q
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__zKtq3)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cHg7Q
                        )}
                      >
                        {"Reservations"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__sPaf)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kfJdo)}
              >
                <div className={classNames(projectcss.all, sty.columns__elcJ4)}>
                  <div className={classNames(projectcss.all, sty.column__wKRv)}>
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__elTRt
                        )}
                      >
                        <h1
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1
                          )}
                        >
                          {"Discover the world and plan the perfect trip."}
                        </h1>
                      </p.Stack>
                    ) : null}
                  </div>
                </div>
              </p.Stack>
            </div>
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___0WpFn)}>
              <div
                data-plasmic-name={"section1"}
                data-plasmic-override={overrides.section1}
                className={classNames(projectcss.all, sty.section1)}
              >
                <div
                  className={classNames(projectcss.all, sty.columns___2Ahap)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__lQEtZ)}
                  >
                    <YouTube
                      data-plasmic-name={"youTube"}
                      data-plasmic-override={overrides.youTube}
                      className={classNames("__wab_instance", sty.youTube)}
                      videoId={"R6MeLqRQzYw" as const}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___7GiGh)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"rowContainer8"}
                      data-plasmic-override={overrides.rowContainer8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.rowContainer8)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__am5XU
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "About our hotel"
                          : "About our resort"}
                      </h2>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e6WnV
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                          : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."}
                      </div>
                    </p.Stack>
                  </div>
                </div>
              </div>
            </div>
          ) : null}

          <div
            data-plasmic-name={"brownColorBg"}
            data-plasmic-override={overrides.brownColorBg}
            className={classNames(projectcss.all, sty.brownColorBg)}
          >
            {true ? (
              <div
                data-plasmic-name={"section12"}
                data-plasmic-override={overrides.section12}
                className={classNames(projectcss.all, sty.section12)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qwBsQ)}
                  >
                    <div
                      data-plasmic-name={"rowContainer3"}
                      data-plasmic-override={overrides.rowContainer3}
                      className={classNames(projectcss.all, sty.rowContainer3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__rv0ZS
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__mInip
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__wKfoE)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("230px" as const)
                                : ("415px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"100%" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/travel_website/images/stephanieHarveyOtUahHcqs0YUnsplash1Jpg.jpeg",
                              fullWidth: 640,
                              fullHeight: 853,
                              aspectRatio: undefined
                            }}
                          />
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__qgzjG
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__t7Qr
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__ajPu1
                                )}
                              >
                                {"Perfect trip"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__a5Nxb
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."
                                  : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."}
                              </div>

                              {true ? (
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__qTEum
                                  )}
                                  color={"softBlue" as const}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__oFe8S
                                    )}
                                  >
                                    {"Our Room"}
                                  </div>
                                </Button>
                              ) : null}

                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__fYgi8
                                )}
                                color={"sand" as const}
                                link={"#" as const}
                              >
                                {"View our rooms"}
                              </Button>
                            </p.Stack>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"section13"}
                data-plasmic-override={overrides.section13}
                className={classNames(projectcss.all, sty.section13)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mUfDb)}
                  >
                    <div
                      data-plasmic-name={"rowContainer9"}
                      data-plasmic-override={overrides.rowContainer9}
                      className={classNames(projectcss.all, sty.rowContainer9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__eZm8T
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__cw5Me
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__hr0Uy)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("230px" as const)
                                : ("415px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"100%" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/travel_website/images/spajpg.jpeg",
                              fullWidth: 800,
                              fullHeight: 1200,
                              aspectRatio: undefined
                            }}
                          />
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__bh9J
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__erRa0
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__uN3TU
                                )}
                              >
                                {"Best rooms"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fy9CH
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."
                                  : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."}
                              </div>

                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__oeGmr
                                )}
                                color={"sand" as const}
                                link={"#" as const}
                              >
                                {"View our rooms"}
                              </Button>

                              {true ? (
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__kaTfi
                                  )}
                                  color={"softBlue" as const}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__f48M6
                                    )}
                                  >
                                    {"Our Room"}
                                  </div>
                                </Button>
                              ) : null}
                            </p.Stack>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"section14"}
                data-plasmic-override={overrides.section14}
                className={classNames(projectcss.all, sty.section14)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__prgoD)}
                  >
                    <div
                      data-plasmic-name={"rowContainer10"}
                      data-plasmic-override={overrides.rowContainer10}
                      className={classNames(projectcss.all, sty.rowContainer10)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns___7NtTn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__wqlIy
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__gxRiQ)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("230px" as const)
                                : ("415px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"100%" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/travel_website/images/krystalNgDoppEkJjIbcUnsplashjpg.jpeg",
                              fullWidth: 2730,
                              fullHeight: 4096,
                              aspectRatio: undefined
                            }}
                          />
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__zq4S
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yDxc1
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__zDscR
                                )}
                              >
                                {"Food service"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kbQi
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."
                                  : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."}
                              </div>

                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__pVzjn
                                )}
                                color={"sand" as const}
                                link={"#" as const}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__l8Ch
                                  )}
                                >
                                  {"View our rooms"}
                                </div>
                              </Button>

                              {true ? (
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__uCts5
                                  )}
                                  color={"softBlue" as const}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__czu2G
                                    )}
                                  >
                                    {"Our Room"}
                                  </div>
                                </Button>
                              ) : null}
                            </p.Stack>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
            ) : null}
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___7Aq1H)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vvEsx)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__c7Ml1)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__kuNMf)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___32G2C)}
                        displayHeight={"434px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("none" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/travel_website/images/mjTangonanOe6QLhRHhhsUnsplashjpg.jpeg",
                          fullWidth: 2734,
                          fullHeight: 4096,
                          aspectRatio: undefined
                        }}
                      />

                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__y7OGc
                        )}
                      >
                        {"Discover new adventures."}
                      </h2>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__yrDug)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___74JwX)}
                        displayHeight={"434px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("none" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/travel_website/images/coconut1Jpg.jpeg",
                          fullWidth: 800,
                          fullHeight: 1200,
                          aspectRatio: undefined
                        }}
                      />

                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__bkUcQ
                        )}
                      >
                        {"Luxurious service."}
                      </h2>
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__lrmJz)}>
            <div className={classNames(projectcss.all, sty.columns__mOrOa)}>
              <div className={classNames(projectcss.all, sty.column__hUaHc)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__d6JYj)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__iuNQf
                      )}
                    >
                      {"Stay posted on special offers and promos"}
                    </h2>

                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "textInput",

                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"Email  Address" as const}
                      value={p.generateStateValueProp($state, [
                        "textInput",

                        "value"
                      ])}
                    />

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__vfIma
                      )}
                      color={"sand" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a1Dxv
                        )}
                      >
                        {"Submit"}
                      </div>
                    </Button>
                  </p.Stack>
                ) : null}
              </div>

              <div className={classNames(projectcss.all, sty.column__xou0M)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__w6Esv)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__lGZc
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Contact us"
                        : "Contact us"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yEUt7
                      )}
                    >
                      {"2478 Lorem Ipsum \nLorem Ipsum , Lorem Ipsum "}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eAfzU
                      )}
                    >
                      {"P: 555.789.5643"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6BmjC
                      )}
                    >
                      {"E: xyz@yourcompany.com"}
                    </div>
                  </p.Stack>
                ) : null}
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__hamtD)}>
            <div className={classNames(projectcss.all, sty.freeBox__bz6N)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__v7Bxi)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6KZwu)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___6LwUc)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qqu1W
                        )}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__jv9Ke
                          )}
                          component={Link}
                          href={"#" as const}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "CONTACT US        CAREERS        PRIVACY        FAQ"
                            : "Contact"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__tFmVu
                          )}
                          component={Link}
                          href={"#" as const}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "CONTACT US        CAREERS        PRIVACY        FAQ"
                            : "FAQ"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__v5KSd
                          )}
                          component={Link}
                          href={"#" as const}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "CONTACT US        CAREERS        PRIVACY        FAQ"
                            : "About us"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__eylaq
                          )}
                          component={Link}
                          href={"#" as const}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "CONTACT US        CAREERS        PRIVACY        FAQ"
                            : "Privacy policy"}
                        </p.PlasmicLink>
                      </p.Stack>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__a8QAe)}
                    >
                      {true ? (
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__wpaq
                          )}
                          component={Link}
                          href={"#" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <Icon3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qXee9
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      ) : null}
                      {true ? (
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___4NAX
                          )}
                          component={Link}
                          href={"#" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <Icon2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__higH
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      ) : null}
                      {true ? (
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__ym7E8
                          )}
                          component={Link}
                          href={"#" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <Icon28Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__r8Z0G
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      ) : null}
                    </p.Stack>

                    <blockquote
                      data-plasmic-name={"blockquote"}
                      data-plasmic-override={overrides.blockquote}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.blockquote
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "© Company. All rights reserved. This site proudly built with "
                          }
                        </React.Fragment>
                        {
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__cQsKg
                            )}
                            component={Link}
                            href={"https://www.plasmic.app" as const}
                            platform={"nextjs"}
                          >
                            {"Plasmic"}
                          </p.PlasmicLink>
                        }
                        <React.Fragment>{"."}</React.Fragment>
                      </React.Fragment>
                    </blockquote>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerMainSection",
    "container",
    "menu",
    "menuBar",
    "h1",
    "section1",
    "youTube",
    "rowContainer8",
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section13",
    "rowContainer9",
    "section14",
    "rowContainer10",
    "textInput",
    "blockquote"
  ],
  headerMainSection: [
    "headerMainSection",
    "container",
    "menu",
    "menuBar",
    "h1"
  ],
  container: ["container", "menu", "menuBar", "h1"],
  menu: ["menu", "menuBar"],
  menuBar: ["menuBar"],
  h1: ["h1"],
  section1: ["section1", "youTube", "rowContainer8"],
  youTube: ["youTube"],
  rowContainer8: ["rowContainer8"],
  brownColorBg: [
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section13",
    "rowContainer9",
    "section14",
    "rowContainer10"
  ],
  section12: ["section12", "rowContainer3"],
  rowContainer3: ["rowContainer3"],
  section13: ["section13", "rowContainer9"],
  rowContainer9: ["rowContainer9"],
  section14: ["section14", "rowContainer10"],
  rowContainer10: ["rowContainer10"],
  textInput: ["textInput"],
  blockquote: ["blockquote"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerMainSection: "div";
  container: "div";
  menu: "div";
  menuBar: "div";
  h1: "h1";
  section1: "div";
  youTube: typeof YouTube;
  rowContainer8: "div";
  brownColorBg: "div";
  section12: "div";
  rowContainer3: "div";
  section13: "div";
  rowContainer9: "div";
  section14: "div";
  rowContainer10: "div";
  textInput: typeof TextInput;
  blockquote: "blockquote";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerMainSection: makeNodeComponent("headerMainSection"),
    container: makeNodeComponent("container"),
    menu: makeNodeComponent("menu"),
    menuBar: makeNodeComponent("menuBar"),
    h1: makeNodeComponent("h1"),
    section1: makeNodeComponent("section1"),
    youTube: makeNodeComponent("youTube"),
    rowContainer8: makeNodeComponent("rowContainer8"),
    brownColorBg: makeNodeComponent("brownColorBg"),
    section12: makeNodeComponent("section12"),
    rowContainer3: makeNodeComponent("rowContainer3"),
    section13: makeNodeComponent("section13"),
    rowContainer9: makeNodeComponent("rowContainer9"),
    section14: makeNodeComponent("section14"),
    rowContainer10: makeNodeComponent("rowContainer10"),
    textInput: makeNodeComponent("textInput"),
    blockquote: makeNodeComponent("blockquote"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
